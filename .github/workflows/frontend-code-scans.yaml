name: Frontend code analysis and security scan.

on:
  pull_request: 
    branches: ["main"]
    paths:
      - 'frontend/**'

  workflow_dispatch:    
env:
  AWS_REGION: us-west-1
  REPOSITORY: learn-frontend
  REGISTRY: Amazon-ECR

jobs:
    code-scans:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
  
      steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessary to fetch all tags and history

      # - name: Set up JDK
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: 'temurin'
      #     java-version: '11'

      # - name: Compile Java code
      #   run: |
      #     cd frontend
      #     mvn clean compile
  
  ################################################################
  ###               SONAR CLOUD SCAN                           ###
  ### Drops the build if any bugs or vulnerabilities are found.###
  ###            Using the default quality gate.               ###
  ###        Connected to my personal Sonar Cloud account      ###
  ################################################################
  
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   with:
      #     args: >
      #       -Dsonar.projectKey=Elsgit1_Els-learning-management-system
      #       -Dsonar.organization=elsgit1
      #       -Dsonar.host.url=https://sonarcloud.io
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.java.binaries=frontend/target/classes
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

  ################################################################
  ###               DETERMINE NEXT VERSION                     ###
  ###   Used for creating new releases and image tags          ###
  ################################################################
  
      - name: Determine Next Version
        id: next_version
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag, assume semver, and sort.
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          # If there's no tag yet, start with v1.0.0.
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          
          # Increment the patch version
          NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
          
          # Output the next version
          echo "::set-output name=tag::$NEXT_TAG"
          echo "Next version: $NEXT_TAG"

  ################################################################
  ###                  BUILD DOCKER IMAGE                      ###
  ###         Build Docker image from the Dockefile            ###
  ################################################################

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        id: build-image
        env:
          ECR_REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile frontend 
          echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  ##########################################################
  ###       Docker image Snyk and sonarqube scan.        ###
  ##########################################################             
                 
      - name: Snyk scan check for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
        #    image: ${{ env.IMAGE_NAME }}
           args: --severity-threshold=high --policy-path=.snyk
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=Elsgit1_Els-learning-management-system
            -Dsonar.organization=elsgit1
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}