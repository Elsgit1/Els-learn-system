name: discovery-server code analysis and security scan.

on:
  pull_request: 
    branches: ["main"]
    paths:
      - 'backend/discovery-server/**'

  workflow_dispatch:    
env:
  AWS_REGION: us-west-1
  REPOSITORY: learn-discovery
  REGISTRY: Amazon-ecr

jobs:
    discovery-server-code-scans:
      runs-on: ubuntu-latest
      permissions:
        contents: write
        packages: write
  
      steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessary to fetch all tags and history

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
  
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
  
      - name: Build Java Backend with Maven
        working-directory: backend/discovery-server
        run: mvn clean package --file pom.xml

  
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

  ################################################################
  ###               DETERMINE NEXT VERSION                     ###
  ###   Used for creating new releases and image tags          ###
  ################################################################
  
      - name: Determine Next Version
        id: next_version
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag, assume semver, and sort.
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          # If there's no tag yet, start with v1.0.0.
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          
          # Increment the patch version
          NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
          
          # Output the next version
          echo "::set-output name=tag::$NEXT_TAG"
          echo "Next version: $NEXT_TAG"

  ################################################################
  ###                  BUILD DOCKER IMAGE                      ###
  ###         Build Docker image from the Dockefile            ###
  ################################################################

      - name: Build Docker image
        id: build-image
        env:
          REGISTRY: ${{ env.REGISTRY }}
          ECR_REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/discovery-server/Dockerfile backend/discovery-server
          echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=name::$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  ##########################################################
  ###       Docker image Snyk and sonarqube scan.        ###
  ##########################################################             
                 
      - name: Snyk scan check for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
           image: ${{ steps.build-image.outputs.name }}
           args: --severity-threshold=high --policy-path=.snyk
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=Els-learning-management-system
            -Dsonar.organization=elsgit1
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=backend/discovery-server/src
            -Dsonar.java.binaries=backend/discovery-server/target
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}